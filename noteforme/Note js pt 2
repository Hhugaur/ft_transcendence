Js note part 2 (https://www.youtube.com/watch?v=eI4J0WwECjk) :
a creuser babel a l'air d'etre le compilateur/testeur de javascript
Ne pas oublie si on utlise des balise  specifique de leur allouer un id ou class.
Problem avec conflit entre id et class dans CSS (video min 58:40 | 1:00:10) 
<div> > #id > .class > balisehtml
Maj js 2:39:00 ou avant parle d'un changement de la detection pour js des id
DOM (Document Object Model) relie selon une structure en arbre
BOM
tous qu'on fait en CSS html peut etre fait en javascript
VScode plugin javascript snippet
style.css pour definir certain truc peut etre repris dans la desc de la video comme base
plugin web clear cache pour clear le cache car peut creer des probleme si pas clear correctement

index.html :
<head>
    <link rel="stylesheet" href="./style.css">
</head>
<!-- test du chapitre addEventListenver vs onclick -->
<!-- pas recommander de mettre du js sur de l'html mais est possible montrer si dessous -->
<!-- 2:45:10 montre le problem du onclick de ne pas se faire appeler plusieur fois sinon prendre que le dernier en compte-->
<body onclick="ring('z')">
    <!-- deux classe different une appeler "click-event" et l'autre "box" -->
    <div class="click-event box">
        <h4>Quiz ?</h4>
        <button id="btn-1">oui</button>
        <button id="btn-2">non</button>
        <p>Bonne reponse est oui</p>
    </div>
    <div class="mousemove"> </div>
    <div class="keypress box"> <h2> PRESSING KEY : <span id="key">on va injecter du texte</span></h2> </div>
    <nav> 
        <ul>
            <li>Accueil</li>
            <li>Services</li>
            <li>Contact</li>
        </ul>
    </nav>
    <form action="" class="box">
        <input type="text" placeholder="nom">
        <select>
            <option value=" "> Select lang</option>
            <option value="Js">Javascript</option>
            <option value="Ts">TypeScript</option>
            <option value="CSS">CSS</option>
        </select>
        <input type="checkbox" id="cgv">
        <!-- checkbox va bien suivie d'un label (ref:html) -->
        <label for="cgv">Acc cgv</label>

        <input type="submit" value="Valider">
    </form>
    <script scr="./index.js"></script>
</body>

style.css :

<!-- utilisation du all pour que tu sois pris en compte  (ref:Note css) -->
* {
    box-sizing: border-box;
    font-family: monospace;
    list-style: none;
}

body {
    text-align: center;
    margin: 0;
    color: white;
    min-height: 200vh;
    <!-- si probleme de truc qui ajouter de la taille a la page comme le truc de la souris video 1:19:45 -->
    overflow-x: hidden;
}

.box {
    border: 6px solid white;
    transition: 0.25s ease;
    background: black;
    padding: 10px;
}

p {
    <!-- si tu veux cacher un truc sur le site mais le reafficher apres a la place de le hide definitivement -->
    visibility: hidden;
    width: 240px;
    margin: 10px auto 0;
    <!-- pour faire un effet -->
    opacity: 0;
    <!-- pour ralentir le process -->
    transition: 0.25s ease;
    <!-- mettre un effet pour qu'il vienne de la gauche -->
    transform: translateX(-200px);
}

<!-- creation d'une class pour le js -->
.question-click {
    background: black;
    border-radius: 30px;
    border: 6px dashed pink;
}
<!-- class comme en C++ (pas reellement) -->
.show-response {
    visibility: visible;
    <!-- pour faire un effet -->
    opacity: 1;
    transform: translateX(0);
}

<!-- va suivre la souris -->
.mousevmove {
    height: 50px;
    width: 50px;
    border: 2px solid pink;
    position: absolute;
    <!-- centrer (ref: CSS) -->
     <!--                   x , y -->
    transform: translate(-50%, -50%);
    <!-- +style -->
    <!-- la console peut faire lag la transition -->
    transition: 0.2s ease;
    border-radius: 50px;
    <!-- par defaut le z est a zero -->
    z-index: -1;
}

nav {
    background: blue;
    <!-- permet d'etre fixer pour rester sur ce que regarde l'utilisateur -->
    position: fixed;
    width: 100%;
    height: 50px;
    top: -50px;
    <!-- les tranistion m'on l'air important pour rendre des choses en movement moins brusque -->
    transition: 0.4s;
}

<!-- truc special fonctionne differement 3:27:00 -->
 <!-- on peut pas faire un querySelector(".nav::after") -->
nav::after {
    content: "";
    height: 150px;
    widht: 150px;
    backgorund: radical-gradient(circle closest-side, white, transparent);
    position: absolute;
    transform: translate(-50%, -50%);
    transition: 0.25s;
    z-index: 20;
    opacity: 0;
    <!-- y a til reellement besoin de ~~ -->
    left: var(~~x);
    top: var(~~y);
}

nav:hover::after {
    opacity: 1;
}

ul {
    display: flex;
    align-item: center;
    justify-content: space-around;
    padding: 0;
}

index.js :

<!-- selecteur -->
<!-- modifier le background du bloc h4 en yellow -->
<!-- document.querySelector('balise').balise.attribut = "arg" -->
<!-- permet d'injecter du code par dessus le html et css -->
document.querySelector('h4').style.background = "yellow";
<!-- si choisi balise forcement const(norm) -->
<!-- c -->
const balisehtml = document.querySelector('h4');
balisehtml.style.background = "yellow";

<!-- click event -->
<!-- pour teste si la variable fonctionne console.log(var) pour l'afficher dans la console du site -->
const questionContainer = document.querySelector(".click-event");
<!-- si l'argument en css a un tirer l'enlever mettre la lettre apres le tiret en Maj -->
questionContainer.style.borderRadius = "150px";
<!-- questionContainer.addEventListener('evenement', function() || () => {}); -->
questionContainer.addEventListener('click', () => {
        <!-- EXEMPLE -->
        //questionContainer.style.background = "red";
        //questionContainer.style.border = "3px solid blue";
    <!-- injecter une class -->
    <!-- y pas de point entre les guillmet car avant on precise qu'on parle d'une class -->
    <!-- add ou remove ou toggle-->
    questionContainer.classList.add("question-click");
});

const btn1 = document.querySelector('#btn-1');
const btn2 = document.getElementByID('btn-2');
const response = document.querySelector('p');

console.log(btn1, btn2);

btn1.addEventListener("click", () => {
    <!-- on met entre guillemet pour parler d'arg si on enlever les guillemet se serai consider comme une variable -->
    //response.style.visibility = "visible";
    <!-- remplacement du truc au dessus par une class -->
    response.classList.add('show-response');
    response.style.background = "green";
});

btn2.addEventListener("click", () => {
    //response.style.visibility = "visible";
     <!-- remplacement du truc au dessus par une class -->
    response.classList.add('show-response');
    response.style.background = "red";
});

<!-- mouse events -->
const mousemove = document.querySelector('.mousemove');

<!-- window au dessus de document dans l'arbre -->
<!-- e = event  aussi recupere toutes les donnes d'event lie a ce qu'il y a comme arg avant-->
<!--  prend pageX pageY petit explication prend toute la page en compte compare a x ou y qui prend juste un morceau de la page --> 
<!-- e est une struct en js c'est appeler objet donc on peut e.donnequ'onveut -->
window.addEventListener('mousemove', (e) => {
    <!-- cas d'erreur possible dans video 1:12:00 (si on met pas le + "px") -->
    mousemove.style.left = e.pageX + "px";
    mousemove.style.top = e.pageY + "px";
});

<!-- on change mousemove en window car l'index z est a -1 donc peut pas interagir avec la page(seul element en -1) -->
window.addEventListener("mousedown", () => {
    <!-- scale(1) default value -->
    <!-- on peut a ecrire deux foix la meme chose donc modifera le transform dans .mousemove par celui la -->
    <!-- donc on va recup les arg donner dans le .mousemove et l'ajouter dans le transform ici (ne pas oublier qu'il faut adapter) -->
    mousevmove.style.transform = "scale(2) translate(-25%, -25%)";
});
window.addEventListener("mouseup", () => {
    mousevmove.style.transform = "scale(1) translate(-50%, -50%)";
    mousemove.style.border = "2px solide blue";
});

questionContainer.addEventListener("mouseenter", () => {
    questionContainer.style.background = "rgba(0,0,0,0.6)";
});

<!-- mouseout (mouseleave bug  1:26:20) -->
questionContainer.addEventListener("mouseout", () => {
    questionContainer.style.background = "black";
});

response.addEventListener('mouseover', () => {
    response.style.transform = "rotate(2deg)";
});

<!-- keypress event -->

const keypressContainer = document.querySelector('.keypress');
<!-- plus opti si un l'id existe deja -->
const key = document.getElementById('key');

<!-- aucune geration des cas d'erreur -->
const ring = (key) => 
{
    <!-- C++ -->
    const audio = new Audio();
    audio.src = key + ".mp3";
    audio.play();
    <!-- mon ajout a moi mes faire des recherche pour ca (y a pas de leak ?) -->
    //delete Audio;
}



<!-- mettre moins 20 ligne pour l'opti  -->
document.addEventListener("keypress", (e) => {
    key.textContent = e.key;
    <!-- switch peut aussi etre utilise-->
    if(e.key === "j")
    {
        keypressContainer.style.background = "pink";
    }
    else if(e.key === "h")
    {
         keypressContainer.style.background = "orange";
    }
    else
    {
         keypressContainer.style.background = "yellow";
    }
    if(e.key === 'z') ring(e.key);
});

<!-- scroll -->
<!-- faut pouvoir scroll -->

<!-- la nav est utise normalement qu'une fois donc normal de pas avoir un nom plus different que les autre -->
const nav = document.querySelector("nav");

window.addEventListener("scroll", () => {
    <!-- pas besoin du e on va utlise window-->
    if(window.scrollY > 120)
    {
        nav.style.top = 0;
    }
    else
    {
        nav.style.top = "-50px";
    }
});

<!-- Form event -->
<!-- 2:05:50 -->
const inputName = document.querySelector('input[type="text"]');
const select = document.querySelector('select');
const form = document.querySelector("form");
<!-- = ""; -->
let pseudo;
let language;
<!-- meme principe sur d'autre langage -->
inputName.addEventListener('input', (e) => {
    <!-- regarde la console pour savoir ce qui faut pointer dans le e pour recup l'info -->
    pseudo = e.target.value;
});

<!-- change ou input tel est la question -->
select.addEventListener('input', () => {
    language = e.target.value;
});

form.addEventListener("submit", (e) => {
    <!-- empeche le submit de recharger la page (comportement par defaut) -->
    e.preventDefault();

    <!-- condition for cgv -->
     <!-- JS connais pour la checkbox et pour les buttons -->
    if (cgv.checked)
    {
        <!-- va cherche dans la balise form la balise div -->
        <!-- pour `` ref: Js pt 1 -->
        <!-- et j'inject de l'html text+balise -->
        <!-- 2:26:17 voir avec textcontent a la place de innerHTML -->
         <!-- texteContent n'interprete pas les balise compare a innerHTML -->
        document.querySelector('form > div').innerHTML = `
            <h3>Pseudo : ${pseudo}</h3>
            <h4>Langage : ${language}</h4>
        `;
    }
    else
    {
        alert("Veuillez accepter les CGV");
    }
});

<!-- Load event -->
<!-- se fait quand la page a fini de charger -->
window.addEventListener("load" () => {
    console.log("Fin du index.js");
});

<!-- forEach -->
 <!-- ne jamais utiliser getElementsByClassName si on a qu'une seul classe -->
//const boxes = document.getElementsByClassName('box');
<!-- 2:35:50 getElementsByClassName fonctionne pas -->
const boxes = document.querySelectorAll('box');
<!-- pas possible comme ca car boxes est un tableaux -->
boxes.addEventListener('click', () => console.log('test'))
<!-- boxes devient box -->
boxes.forEach((box) => {
    box.addEventListener('click', (e) => {
        <!-- Exemple -->
        e.target.style.transform = "scale(0.7)";
    });
});

<!-- addEventListener vs onclick -->

<!-- function() pareil que () => {} -->
<!-- onscroll -->
document.body.onclick = function() {
    
};

<!-- on ne peut pas avec le onclick faire deux meme evenement (dans deux truc a part) car ca va prend juste le dernier et donc casse -->
 <!-- ce probleme n'existe pas pour addEventListener -->
document.body.onclick = () => {

};

<!-- pour le bubbling et usecapture -->
<!-- https://gomakethings.com/what-is-that-third-argument-on-the-vanilla-js-addeventlistener-method-and-when-do-you-need-it/ -->

<!-- bubbling => fin des event (de base l'evenlistener est param en mode bubbling) -->
 <!-- 1 arg facon de faire 2 arg la fonction 3 arg defaut false donc en mode bubbling-->
document.body.addEventListener('click', () => {
    
});

<!-- usecapture => debut des event -->
<!-- mettre true pour le mode usecapture -->
document.body.addEventListener('click', () => {

}, true);

<!-- stopPropagation et removeEventListener -->
 <!-- usecapture ref 2:53:39 usecapture fonctionne avant ce truc -->
questionContainer.addEventListener('click' (e) => {
    alert("test");
    <!-- eviter de se propager sur les autre evenement comme le onpreventdefaut eviter conflit avec     d'autre evenement-->
    e.stopPropagetion();
});

<!-- BOM (browser object model) pas besoin de preciser window-->
window.innerHeight; //taille de la fenetre
window.open('https://google.com', "cours js", "height=600, widht=800")
//window.close();

//evenement addosse a windows
//window.alert("hello"); pas besoin du window pour celui la
<!-- fonction qui renvoie la valeur demander dans l'alerte (return comme en c)-->
<!-- confirm -->
<!-- creer un popup alert avec un bouton en plus -->
btn2.addEventListener('click' ()=> {
    confirm("wrong");
});
<!-- prompt -->
btn1.addEventListener('click', () => {
    <!-- alert avec une boite qu'on peut remplir -->
    let answer =prompt("entrez votre nom");

    <!-- on met += pour eviter d'ecrase ce qu'on a fait avant -->
    questionContainer.innerHTML += "<h3>Brave :" + answer + "</h3>"
    <!-- meme chose -->
    questionContainer.innerHTML += `<h3>Brave : ${answer}</h3>`
});

<!-- compte a rebours -->
setTimeout(() => {
    //logique a exec
    <!-- exemple -->
     questionContainer.style.borderRadius = "300px";
}, "temps en milisecondes avant de declencher");

<!-- fera toutes les deuxieme arg de temps (spam de nouvelle boite dans le html) -->
setInterval(() => {
    document.body.innerHTML += 
        `<div class="box">
            <h2>Nouvelle Boite !</h2>
        </div>`
}, 1000);

document.body.addEventListener('click', (e) => {
    <!-- debug pour savoir ou j'ai cliquer -->
    console.log(e.target);
    <!-- retirer un element de la page -->
    e.target.remove();
    <!-- lie a interval pour eviter que se fasse a l'infini -->
    clearInterval(interval);
});

<!-- Location -->
<!-- permet de connaitre la locations -->
<!-- href lien du site -->
console.log(location.href);
<!-- nom de l'host -->
console.log(location.host);
<!-- apres l'host dans href -->
console.log(location.pathname);
console.log(location.search);
<!-- remplace le lien actuel par celui entre parenthese (redirection) -->
location.replace('http://agar.io');
window.onload = () => {
    <!-- comme location.replace -->
    location.href = "htpps://twitter.fr";
};

<!-- Navigateur -->
<!-- info user -->
console.log(navigator.userAgent);
<!-- plus d'info pour navigator -->
<!-- https://developer.mozilla.org/fr/docs/Web/API/Geolocation/getCurrentPosition -->
<!-- on peut cfg le nav pour change de pays ou autre (a creuser) -->

<!-- history -->
console.log(window.history);
<!-- permet de revenir en arriere -->
window.history.back();
histor.go(-2);

<!-- setProperty -->
<!-- besoin de la navbar -->
window.addEventListener('mousemove', (e) => {
    <!-- layer indique quand on est dessus -->
    nav.style.setProperty('~~x', e.layerX + "px");
    nav.style.setProperty('~~y', e.layerY + "px");
    <!-- shift + alt + fleche direction haut ou bas -->
    nav.style.setProperty('~~y', e.layerY + "px");
});

console de l'application web :
<!-- selecteur -->
<!-- fait dans la console nous permet de recuperer la balise body (js)-->
\>document.querySelector('body')
<!-- CSS -->
\>document.querySelector('#btn-1')
<!-- fini -->