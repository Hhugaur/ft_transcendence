CSS note (https://www.youtube.com/watch?v=iSWjmVcfQGg):
plugin dans chrome ruler measurement qui permet de voir la taille de la fenetre et plus.
n'hesite pas a utiliser chrome ou firefox pour tester la page car ils ont des outils integrer quand t'inpescter la page
pour tester la responsivite d'un site partir de la taille la plus grande. faut determiner a partir de quelle taille d'ecran le site casse
pour apporter plus de condition et changer le comportement

police d'ecriture :
https://fonts.google.com  

index.html :
des elemets peut etre des bloc donc prend tout la ligne pour eux les autre se mettron en dessous ou au dessus 


<head>
    <title></title>
    <!-- va se connecter au fichier style.css et le lire -->
    <link rel="typesheet" href="style.css" />
</head>
<body>
    <header>
        <h1>Titre</h1>
    </header>
    <main>
        <!-- class va servir pour le .css pour faire reference a cet balise -->
        <div class="flexbox">
            <ul>
                <li>go se referer a Note html pour ces balises</li>
            </ul>
        </div>
        <div class="grid">
            <div class="grid-container">
                <!-- recommande que les grosse image soit importe depuis css plus optimiser -->
                <!-- image moins lourde peut etre sur le html -->
                <img src="./img" alt="error">
                <form action="">
                    <input type="text" id="firstname" placeholder="Prenom" />
                    <textarea cols="30" rows="10" placeholder="feedback"></textarea>
                    <input type="submit" value="Ecrire quelque chose" id="btn-submit" />
                </form>
            </div>
        </div>
        <div class="absolute">
            <span id="circle1"></span>
            <span id="circle2"></span>
        </div>
    </main>
</body>

style.css :
fait ref au balise html en gros si dans le fichier t'ecris title c'est la balise title que tu vas modifier.
comme en C y a juste a tapper ce qu'on cherche si besoin de certaine comme mettre tout en majuscule
l'enfant a la priorite sur les parametre <body> <h1>enfant</h1> </body> par contre si le parent donne des parametre et que l'enfant n'en as pas 
alors l'enfant recup les parametre du parent
pour le .class c'est la class le #id c'est pour l'id


<!-- on peut telecharger la police d'ecriture ou recup le code ou l'import -->
<!-- .bitcount-prop-single-<uniquifier> {
  font-family: "Bitcount Prop Single", system-ui;
  font-optical-sizing: auto;
  font-weight: <weight>;
  font-style: normal;
  font-variation-settings:
    "slnt" 0,
    "CRSV" 0.5,
    "ELSH" 0,
    "ELXP" 0;
} -->

police d'ecriture 
@import url('https://fonts.googleapis.com/css2?family=Bitcount+Prop+Single:wght@100..900&display=swap');

@font-face {
    font-family: test;
    src: url(./fichier);
}
<!-- L'etoile donne du style a tous les elements  pour le par defaut-->
* {
    margin: 0;
    padding: 0;
    <!-- pour debug -->
    border: 2px solid red;
}

<!-- input et textarea pas pointe par le body qui englobe tous qu'il y a dans son interieur -->
body {
    font-family: test, error;
    background: url(./fichier) no-repeat center/cover;
    <!-- VH = 100% de la taille de l'ecran de l'utilisateur (viewport height) -->
    min-height: 100vh;
}

h1 {
    text-transform: uppercase;
    letter-spacing: 3px;
    text-align: center;
    <!-- les taille de police doivent etre en REM 1rem = 16px -->
    fonts-size: 2.5rem;
    <!-- autre maniere de changer la taille d'un texte pour qu'il soit responsive -->
    fonts-size: 10vw;
    <!-- l'ombre ne doit pas etre tres pronnonce 25% d'oppacite -->
    text-shadow: 0 0 0 black;
    <!-- couleur du texte -->
    color: #000000;
    <!-- tout peut etre trouver sur internet juste a trouver les bon termes -->
    <!-- lie au import -->
    font-family: "Bitcount Prop Single", system-ui;
}

main {
    <!-- boite -->
    <!-- difference entre min-height et height. en gros je force avec height donc ca peut casser si je veux ce probleme j'utilise min-height  -->
    <!-- peut concerner d'autre truc  -->
    min-height: 500px;
    <!-- height en px mais width est mieux avec un pourcentage -->
    width: 90%;
    background: white;
    <!-- centrer une boite -->
    <!-- premier value haut bas deuxieme value gauche droite si on met que deux valeurs dans margin -->
    margin: 0 auto;
    border: 2px solide blue;
    border-radius: 20px;
    box-shadow: comme text-shadow;
    <!-- faire gaffe si quelque chose n'ext pas comme on le veut car il a c'est propre regle -->
    padding: 15px;
}

<!-- regarde tout les elements qui ont le mot flexblox a l'interieur -->
<!-- prend les deux en compte -->
.flexbox, .grid, .absolute {
    <!-- tableaux -->
    border: 2px solide blue;
}

<!-- FLEXBOX essayer de creer un tableau ou trois boite son egal sur la meme ligne -->
<!-- sert a repartie equitablement des elements sur la page vertical ou horizontal -->

.flexbox ul {
    padding: 0;
    <!-- aligne les elements -->
    display: flex;
    justify-content: space-around;
}

.flexbox li {
    list-style: none;
    height: 160px;
    width: 160px;
    margin: 10px;
    <!-- center un unique eleement verticalement et horizontalement -->
    display: flex;
    justify-content: center;
    align-items: center;  
}

<!-- GRID -->

<!-- mettre dans l'ordre le code pour eviter la confusion  -->
.grid-container {
    display: grid;
    <!-- separe en deux le tableaux lie avec les pourcentage  on peut ajouter plus de tableau juste en ajoutant des pourcentage-->
    <!-- total 100 % -->
    grid-template-columuns: 30% 60%;
}

.grid img {
    <!-- pourcentage pour rendre l'image plus responsive -->
    <!-- on la passe de 30 a 80 car la modification que j'ai fait au grid-container a changer la maniere dont l'image se met
    donc je doit readjuster l'image dans mon tableaux -->
    width: 80%;
    <!-- prend tout l'espace -->
    display: block;
}

form {
    display: grid;
    <!-- en gros j'ai dit que j'avais que 2 colonne dans mon tableaux et apres essaye de les equilibrer par rapport au autre regle -->
    grid-template-columuns: 1fr 1fr;
    <!-- manque encore un truc pour les lignes car va essayer de remplier tout sont tableaux -->
    grid-template-rows: 1fr 1fr 1fr;
    <!-- dessine les cases pour les mettres comme je veux -->
    grid-template-areas: 
    "i1 i2"
    "ta ta"
    "vi" "bt";
}

input, textarea {
    margin: 5px;
    border: 1px solid blue;
    padding: 10px;
    font-size: 1.1rem;
    <!-- arondir les angles -->
    border-radius: 5px;
}

<!-- rappel met mettre des class ou id c'est mieux que de pointer une balise general qui peut etre utiliser partout -->
textarea {
    grid-area: ta;
    height: 40px;
    <!-- eviter que l'utilisateur casse la page avec le textarea comme dans le feedback de 42  -->
    resize: none;
}

#btn-submit {
    gride-area: bt;
    cursor: pointer;
    background: blue;
    <!-- element de transition mieux a mettre a l'element de base-->
    transition: 0.2s;
}

<!-- speudo class -->
#btn-submit:hover {
    background: red;
    color: white;
}

<!-- absolute -->
 <!-- sans element en relative, de base, l'element en absolute l'est par rapport au body -->
<!-- il faut mettre une position relative au parent pour contraindre l'element en absolute dans ses frontieres -->
.absolute {
    <!-- modifier le #circle1 pour la position du button -->
    position: relative
}

#circle1 {
    height: 60px;
    width: 60px;
    background: blue;
    position: absolute;
    <!-- cercle -->
    border-radieus: 150px;
    <!-- ce met 0 du body ou parent -->
    <!-- position du span  on ffait une sorte de boutton -->
    top: 0;
    right: 0;
}

#circle2 {
    height: 40px;
    width: 40px;
    <!-- cercle -->
    border-radieus: 150px;
    background: blue;
    position: absolute;
    <!-- centrer l'element -->
    left: 50%;
    <!-- pour que le cercle soit pris au milieu plus tot que a l'extremite gauche -->
    transform: translateX(-50%);
}

<!-- responsive -->
<!-- en dessous de 900px fait les modification pointe dans le truc en dessous -->
@media screen and (max-width: 900px) {
    body {
        background: red;
    }
    .grid-cointainer {
        display: block;
    }
    .grid-cointainer img {
        width: 40%;
    }
}

@media screen and (max-width: 610px) {
    .flexbox ul {
        <!-- change la disposition des boite -->
        flex-directions: column;
        align-items: center;
    }
    form {
        grid-template-columuns: 1fr;
        <!-- repeat met 1fr 1fr 1fr 1fr -->
        grid-template-rows: repeat(4, 1fr);
        <!-- litteralement dessine le truc -->
        grid-template-areas:
            "i1"
            "i2"
            "ta"
            "bt";
    }
    input, textarea {
        <!-- autre maniere de regle la casse -->
        font-size: 0.8rem;
    }
}

<!-- fini -->